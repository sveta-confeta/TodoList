{"version":3,"sources":["TodoList.module.css","components/Button.tsx","components/Input.tsx","components/AddItemForm.tsx","components/EditSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ButtonOne","props","Button","variant","size","style","maxWidth","minHeight","minWidth","maxHeight","className","s","btn","onClick","name","Input","value","title","onChange","onChangeHandler","onKeyPress","keyPress","error","AddItemForm","useState","setTitle","setError","addTaskButton","trimmedTitle","trim","addItem","event","currentTarget","key","callback","errorMessage","EditSpan","editMode","setEditMode","autoFocus","onBlur","apdateTask","onDoubleClick","Delete","color","cursor","TodoList","topSet","filteredTasks","todolistID","removeTodolists","removeTodolist","titleTodolist","callbackTitleTodolist","newTaskTitle","addTask","tasks","map","m","id","isDone","type","checked","e","mId","changeTaskStatus","mID","apdateTaskTitle","callbackHandlerapdateTask","ButtonGroup","filter","App","todolistID_1","v1","todolistID_2","todolists","setTodolists","setTasks","copyTasks","removeTask","taskID","f","newIsDoneValue","t","filteredTask","copyTask","getTasksForRender","todolistsComp","setFilter","newTodolistID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e42152c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"TodoList_btn__3CgL8\",\"error\":\"TodoList_error__3_fnM\",\"errorMessage\":\"TodoList_errorMessage__1KswU\",\"activeFilter\":\"TodoList_activeFilter__4xUgG\",\"isDone\":\"TodoList_isDone__2fcaK\"};","import React from \"react\";\r\nimport s from './../TodoList.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\n type ButtonPropsType={\r\n     name:string\r\n     callback?:()=>void\r\n }\r\nexport const ButtonOne=(props:ButtonPropsType)=>{\r\n     const onClickHandler=()=>{\r\n         // props.callback()\r\n     }\r\n    return(\r\n\r\n            <Button variant={'contained'} size={'small'} style={{maxWidth: '27px',minHeight: '23px', minWidth:'27px', maxHeight:'23px'}} className={s.btn} onClick={onClickHandler}>{props.name}</Button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from '../TodoList.module.css'\r\n\r\ntype InputPropsType = {\r\n\r\n    title: string\r\n    error: boolean\r\n    onChangeHandler:(event: ChangeEvent<HTMLInputElement>)=>void\r\n    keyPress:(event: KeyboardEvent<HTMLInputElement>)=>void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                value={props.title}\r\n                onChange={props.onChangeHandler}\r\n                onKeyPress={props.keyPress}\r\n                className={props.error ? s.error : ' '}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Input} from \"./Input\";\r\nimport {ButtonOne} from \"./Button\";\r\nimport s from \"../TodoList.module.css\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem:(itemTitle:string)=>void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n\r\n    const [title, setTitle] = useState<string>(' '); //локальный useState для предварительного пользовательского ввода в инпут.\r\n    //по умолчанию пустая сторока\r\n    let [error, setError] = useState(false); //хук для бордера инпута красный-не красный\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  //функция для инпута\r\n        setError(false);\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const keyPress = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addTaskButton();\r\n        }\r\n    }\r\n\r\n    const addTaskButton = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const blockButton = () => {\r\n        addTaskButton()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input onChangeHandler={onChangeHandler} title={title}  error={error}\r\n                   keyPress={keyPress}/>\r\n\r\n            <ButtonOne name={'+'} callback={blockButton}/>\r\n            {error ? <div className={s.errorMessage}>Title is requires</div> : ''}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {ButtonOne} from \"./Button\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype EditSpanPropsType={\r\n    title:string //компонента получает строку\r\n    apdateTask:(title:string)=>void//нам нужен колбэк который подхватит новое значение инпута отредактипованную унесет его в родителя\r\n}\r\n\r\nconst EditSpan = (props:EditSpanPropsType) => {\r\n    //у титла должно быть два состояния: обычное и для редактирования. это прямое показание для создания локального стейта\r\n    let[editMode,setEditMode]=useState<boolean>(false);\r\n    //у нас появился инпут для редактирования тасок, а это значит нужен локстейт хранить инфу в инпуте до отправки в BLL\r\n    const [title, setTitle] = useState<string>( props.title);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {  //функция для инпута\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onEditMode = () => {\r\n      setEditMode(true);\r\n    }\r\n\r\n    const offEditMode=()=>{\r\n       props. apdateTask(title);\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n\r\n        editMode\r\n            ?  <div><input onChange={onChangeHandler} value={title} autoFocus onBlur={offEditMode}/>   <ButtonOne name={'x'} /> </div>\r\n            : <div><span onDoubleClick={onEditMode}>{props.title}</span>  <Delete  color=\"action\" style={{cursor:'Pointer'}} /> </div>\r\n\r\n    );\r\n};\r\n\r\nexport default EditSpan;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {filterType} from \"./App\";\r\nimport {ButtonOne} from \"./components/Button\";\r\nimport s from './TodoList.module.css'\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport EditSpan from \"./components/EditSpan\";\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    id: string //для идентификации конкретной таски, когда их много\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TasksType={\r\n    [key:string]:Array<TaskType>\r\n\r\n}\r\n\r\ntype TodoListPropsType = {\r\n    todolistID:string\r\n    title: string\r\n    tasks:Array<TaskType>\r\n    removeTask: (mID: string,todolistID:string) => void//функция удаления\r\n    setFilter: (id:string,value: filterType) => void //void-потому что функция ничего не возращает,без return\r\n    addTask: (title: string,todolistID:string) => void //функция добавления в инпут\r\n    changeTaskStatus: (id: string,newIsDoneValue: boolean,todolistID:string) => void\r\n    filter: filterType;\r\n    filteredTasks:(id:string,value:filterType,)=>void\r\n    removeTodolist:(todolistID:string)=>void\r\n    apdateTaskTitle:(todolistsID:string,taskID:string,title:string)=>void\r\n    titleTodolist:(todolistsID:string,title:string)=>void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n\r\n    const topSet = (value: filterType) => { //app.tsx:type filterType = 'All' | 'Active' | 'Completed' //типизация фильтра для кнопок\r\n        props.filteredTasks(props.todolistID,value);\r\n    }\r\n    const removeTaskHandler = (tID: string) => props.removeTask(tID,props.todolistID);\r\n\r\n\r\n\r\n    const changeStatus = (mId: string, value: boolean) => props.changeTaskStatus(mId, value,props.todolistID);\r\n    const removeTodolists=()=>{\r\n        removeTodolist();\r\n    }\r\n\r\n    const removeTodolist=()=>{\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const addTask=(newTaskTitle:string)=>{\r\n         props.addTask(newTaskTitle,props.todolistID)\r\n    }\r\n\r\n    const callbackHandlerapdateTask=(mID:string,title:string)=>{\r\n        props.apdateTaskTitle(props.todolistID,mID,title);\r\n    }\r\n    const callbackTitleTodolist=(title:string)=>{\r\n        props.titleTodolist(props.todolistID,title)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<h3>{props.title}</h3>*/}\r\n            <h3><EditSpan title={props.title} apdateTask={ (title:string)=>callbackTitleTodolist(title)}/></h3>\r\n            {/*<IconButton aria-label=\"delete\" >*/}\r\n                <Delete  color=\"action\" style={{cursor:'Pointer'}} onClick={removeTodolists}/>\r\n        {/*</IconButton>*/}\r\n            <ButtonOne name={'X'} callback={removeTodolists}/>\r\n            <div>\r\n                {/*//компонента с инпут и кнопкой:*/}\r\n              <AddItemForm addItem={addTask} />\r\n                {/*<input*/}\r\n                {/*    value={title}*/}\r\n                {/*    onChange={onChangeHandler}  //!!!!!инпут сдесь*/}\r\n                {/*    onKeyPress={keyPress}*/}\r\n                {/*/>*/}\r\n                {/*/!*передаем функцию-коллбэк:*!/*/}\r\n                {/*/!*<button onClick={addTitle}>+</button>*!/*/}\r\n\r\n\r\n            </div>\r\n            <ul>{/* потому что в эту ul мы передаем array => tasks*/}\r\n                {props.tasks.map((m => {\r\n\r\n                    return (\r\n                        <li key={m.id} className={m.isDone ? \"is-done\" : ''}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={m.isDone}\r\n                                   onChange={(e: ChangeEvent<HTMLInputElement>) => changeStatus(m.id, e.currentTarget.checked)}\r\n                            />\r\n                            <EditSpan title={m.title}  apdateTask={ (title:string)=>callbackHandlerapdateTask(m.id,title)}/>\r\n                            {/*<ButtonOne name={'x'} callback={() => removeTaskHandler(m.id)}/>*/}\r\n\r\n                        </li>\r\n                    )\r\n                }))}\r\n            </ul>\r\n            <div>\r\n                <ButtonGroup variant=\"contained\"\r\n                size={\"small\"}>\r\n\r\n                <Button color = {props.filter==='All' ? 'secondary': 'success'}\r\n                        // className={props.filter === 'All' ? s.activeFilter : ''}\r\n                        onClick={() => topSet('All')}>All</Button>\r\n                    <Button\r\n                        color = {props.filter==='Active' ? 'secondary': 'success'}\r\n                        // className={props.filter === 'Active' ? s.activeFilter : ''}\r\n                            onClick={() => topSet('Active')}> Active\r\n                        </Button>\r\n                        <Button\r\n                            color = {props.filter==='Completed' ? 'secondary': 'success'}\r\n                            // className={props.filter === 'Completed' ? s.activeFilter : ''}\r\n                                onClick={() => topSet('Completed')}>Completed\r\n                            </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n\r\n)\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {TaskType} from \"./TodoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type filterType = 'All' | 'Active' | 'Completed' //типизация фильтра для кнопок\r\ntype TodilistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: filterType;\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolistID_1 = v1();\r\n    const todolistID_2 = v1();\r\n    let [todolists, setTodolists] = useState<Array<TodilistsType>>([  //чтоб происходила перерисовка видоизмененных данных\r\n        {id: todolistID_1, title: 'What to Learn', filter: 'All'},//use state принимает данные и возращает массив\r\n        {id: todolistID_2, title: 'What to read', filter: 'All'},]);\r\n    //BLL\r\n\r\n\r\n    //hook\r\n    let [tasks, setTasks] = useState({   //чтоб происходила перерисовка видоизмененных данных\r\n        [todolistID_1]: [{id: v1(), title: 'НTML', isDone: true},//use state принимает данные и возращает массив\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'JS/TS', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n            {id: v1(), title: 'JS/TS', isDone: false},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'JS/TS', isDone: true},\r\n        ],\r\n        [todolistID_2]: [\r\n            {id: v1(), title: 'React', isDone: true},\r\n            {id: v1(), title: 'Redux', isDone: true},\r\n            {id: v1(), title: 'SASS', isDone: false},\r\n            {id: v1(), title: 'OPP', isDone: false},\r\n\r\n        ]\r\n    });\r\n\r\n\r\n    //функция-колбэк для кнопки добавления задач в инпут:\r\n    const addTask = (title: string, todolistID: string) => {\r\n        const copyTasks = {...tasks};\r\n        copyTasks[todolistID] = [{id: v1(), title: title, isDone: true}, ...tasks[todolistID]]\r\n        setTasks(copyTasks);\r\n    }\r\n\r\n    // функция для кнопки удаления\r\n    const removeTask = (taskID: string, todolistID: string) => {\r\n        const copyTasks = {...tasks};\r\n        copyTasks[todolistID] = copyTasks[todolistID].filter(f => f.id !== taskID)\r\n        setTasks(copyTasks) //функция удаления которая будет привязана к кнопке и ее надо через\r\n        //пропс поместить в туду лист\r\n    }\r\n    const changeTaskStatus = (taskID: string, newIsDoneValue: boolean, todolistID: string) => {\r\n        const copyTasks = {...tasks};\r\n        copyTasks[todolistID] = tasks[todolistID].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t);\r\n        setTasks(copyTasks);\r\n    };  // функция управления чекбоксом вкл и выкл\r\n\r\n\r\n    //функция фильтрации кнопок: принимает значение value от кнопок\r\n    const filteredTask = (todolistID: string, value: filterType) => {  //принимаем от кнопки value (например'all')\r\n        setTodolists(todolists.map(m => todolistID === m.id ? {...m, filter: value} : m));\r\n    }\r\n\r\n    const apdateTaskTitle=(todolistID:string,taskID:string,title:string)=>{\r\n        const copyTasks = {...tasks};\r\n        copyTasks[todolistID] = tasks[todolistID].map(t => t.id === taskID ? {...t, title:title} : t);\r\n        setTasks(copyTasks);  //функция которая редактирует title в тасках\r\n\r\n  }\r\n\r\n  const titleTodolist=(todolistID:string,title:string)=>{\r\n     setTodolists(todolists.map(m=> todolistID===m.id ? {...m,title:title} :m ));\r\n  } //функция которая редактирует  title в тодолистах\r\n\r\n    //функция удаления тудулистов\r\n    const removeTodolist = (todolistID: string) => {\r\n\r\n        setTodolists(todolists.filter(f => f.id !== todolistID))\r\n        const copyTask = {...tasks}\r\n        delete copyTask[todolistID]\r\n        setTasks(copyTask);\r\n    }\r\n    const addTodolist = (titleTodolist:string) => {\r\n      const newTodolistID = v1() ;\r\n      setTodolists([...todolists,{id:newTodolistID,title:titleTodolist,filter:'All'}]);\r\n      setTasks({...tasks,[newTodolistID]:[]});//для нашего тудулиста должны создать массив для хранения тасок=\r\n        // изменяем стейт с тасками =создадим новое свой ство:пустой массив где будем храниить таски нашего тудулиста.\r\n    }\r\n\r\n\r\n    const getTasksForRender = (filter: filterType, tasks: Array<TaskType>) => {\r\n        switch (filter) {\r\n            case 'Completed':\r\n                return tasks.filter(f => f.isDone)\r\n            case  'Active':\r\n                return tasks.filter(f => !f.isDone);\r\n            default:\r\n                return tasks;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const todolistsComp = todolists.map(m => {\r\n        // if (m.filter === 'Active') {\r\n        //     tasks = tasks.filter(f => f.isDone);\r\n        // }\r\n        //\r\n        // if (m.filter === 'Completed') {\r\n        //     tasks = tasks.filter(f => !f.isDone);\r\n        // }\r\n        return (\r\n\r\n            <TodoList\r\n                key={m.id}\r\n                todolistID={m.id} //если красная надо типизировать v todolist.tsx\r\n                title={m.title}\r\n                tasks={getTasksForRender(m.filter, tasks[m.id])}\r\n                removeTask={removeTask} //перебрасываем в тудулист функция удаления\r\n                setFilter={filteredTask} //передаем функцию и не забываем типизаровать в тудулисте\r\n                addTask={addTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                filter={m.filter} //для навешивания css классов кнопкам\r\n                filteredTasks={filteredTask}\r\n                removeTodolist={removeTodolist}\r\n                apdateTaskTitle={apdateTaskTitle}\r\n                titleTodolist={titleTodolist}\r\n            />\r\n\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            {/*//компонента с инпут и кнопкой:*/}\r\n            {/*инпут и кнопка:*/}\r\n           <AddItemForm  addItem={addTodolist}/>\r\n\r\n            <div className=\"App\">\r\n\r\n                {todolistsComp}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}